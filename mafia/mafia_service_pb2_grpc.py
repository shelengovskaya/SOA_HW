# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mafia_service_pb2 as mafia__service__pb2


class MafiaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_stream(
                '/Mafia/Connect',
                request_serializer=mafia__service__pb2.ConnectMessage.SerializeToString,
                response_deserializer=mafia__service__pb2.ServerMessage.FromString,
                )
        self.Say = channel.unary_unary(
                '/Mafia/Say',
                request_serializer=mafia__service__pb2.SayMessage.SerializeToString,
                response_deserializer=mafia__service__pb2.SayResponse.FromString,
                )
        self.CloseDay = channel.unary_unary(
                '/Mafia/CloseDay',
                request_serializer=mafia__service__pb2.CloseDayMessage.SerializeToString,
                response_deserializer=mafia__service__pb2.CloseDayResponse.FromString,
                )
        self.Kill = channel.unary_unary(
                '/Mafia/Kill',
                request_serializer=mafia__service__pb2.KillMessage.SerializeToString,
                response_deserializer=mafia__service__pb2.KillResponse.FromString,
                )
        self.Investigate = channel.unary_unary(
                '/Mafia/Investigate',
                request_serializer=mafia__service__pb2.InvestigateMessage.SerializeToString,
                response_deserializer=mafia__service__pb2.InvestigateResponse.FromString,
                )
        self.PublishInvestigation = channel.unary_unary(
                '/Mafia/PublishInvestigation',
                request_serializer=mafia__service__pb2.PublishInvestigationMessage.SerializeToString,
                response_deserializer=mafia__service__pb2.PublishInvestigationResponse.FromString,
                )
        self.Disconnect = channel.unary_unary(
                '/Mafia/Disconnect',
                request_serializer=mafia__service__pb2.DisconnectMessage.SerializeToString,
                response_deserializer=mafia__service__pb2.DisconnectResponse.FromString,
                )


class MafiaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Say(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseDay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Kill(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Investigate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishInvestigation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MafiaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_stream_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=mafia__service__pb2.ConnectMessage.FromString,
                    response_serializer=mafia__service__pb2.ServerMessage.SerializeToString,
            ),
            'Say': grpc.unary_unary_rpc_method_handler(
                    servicer.Say,
                    request_deserializer=mafia__service__pb2.SayMessage.FromString,
                    response_serializer=mafia__service__pb2.SayResponse.SerializeToString,
            ),
            'CloseDay': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseDay,
                    request_deserializer=mafia__service__pb2.CloseDayMessage.FromString,
                    response_serializer=mafia__service__pb2.CloseDayResponse.SerializeToString,
            ),
            'Kill': grpc.unary_unary_rpc_method_handler(
                    servicer.Kill,
                    request_deserializer=mafia__service__pb2.KillMessage.FromString,
                    response_serializer=mafia__service__pb2.KillResponse.SerializeToString,
            ),
            'Investigate': grpc.unary_unary_rpc_method_handler(
                    servicer.Investigate,
                    request_deserializer=mafia__service__pb2.InvestigateMessage.FromString,
                    response_serializer=mafia__service__pb2.InvestigateResponse.SerializeToString,
            ),
            'PublishInvestigation': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishInvestigation,
                    request_deserializer=mafia__service__pb2.PublishInvestigationMessage.FromString,
                    response_serializer=mafia__service__pb2.PublishInvestigationResponse.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=mafia__service__pb2.DisconnectMessage.FromString,
                    response_serializer=mafia__service__pb2.DisconnectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Mafia', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mafia(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Mafia/Connect',
            mafia__service__pb2.ConnectMessage.SerializeToString,
            mafia__service__pb2.ServerMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Say(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/Say',
            mafia__service__pb2.SayMessage.SerializeToString,
            mafia__service__pb2.SayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseDay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/CloseDay',
            mafia__service__pb2.CloseDayMessage.SerializeToString,
            mafia__service__pb2.CloseDayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Kill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/Kill',
            mafia__service__pb2.KillMessage.SerializeToString,
            mafia__service__pb2.KillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Investigate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/Investigate',
            mafia__service__pb2.InvestigateMessage.SerializeToString,
            mafia__service__pb2.InvestigateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishInvestigation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/PublishInvestigation',
            mafia__service__pb2.PublishInvestigationMessage.SerializeToString,
            mafia__service__pb2.PublishInvestigationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/Disconnect',
            mafia__service__pb2.DisconnectMessage.SerializeToString,
            mafia__service__pb2.DisconnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
